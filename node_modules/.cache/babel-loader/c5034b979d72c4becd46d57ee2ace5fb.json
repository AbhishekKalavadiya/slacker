{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\n\nconst child_process_1 = require(\"child_process\");\n\nconst fs = require(\"fs\");\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst crypto_1 = require(\"../crypto/crypto\");\n\nconst transporters_1 = require(\"../transporters\");\n\nconst computeclient_1 = require(\"./computeclient\");\n\nconst idtokenclient_1 = require(\"./idtokenclient\");\n\nconst envDetect_1 = require(\"./envDetect\");\n\nconst jwtclient_1 = require(\"./jwtclient\");\n\nconst refreshclient_1 = require(\"./refreshclient\");\n\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\n\nclass GoogleAuth {\n  constructor(opts) {\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined; // To save the contents of the JSON credential file\n\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  } // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n\n\n  get isGCE() {\n    return this.checkIsGCE;\n  }\n\n  getProjectId(callback) {\n    if (callback) {\n      this.getProjectIdAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getProjectIdAsync();\n    }\n  }\n\n  getProjectIdAsync() {\n    if (this._cachedProjectId) {\n      return Promise.resolve(this._cachedProjectId);\n    } // In implicit case, supports three environments. In order of precedence,\n    // the implicit environments are:\n    // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n    // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n    // - Cloud SDK: `gcloud config config-helper --format json`\n    // - GCE project ID from metadata server)\n\n\n    if (!this._getDefaultProjectIdPromise) {\n      // TODO: refactor the below code so that it doesn't mix and match\n      // promises and async/await.\n      this._getDefaultProjectIdPromise = new Promise( // eslint-disable-next-line no-async-promise-executor\n      async (resolve, reject) => {\n        try {\n          const projectId = this.getProductionProjectId() || (await this.getFileProjectId()) || (await this.getDefaultServiceProjectId()) || (await this.getGCEProjectId());\n          this._cachedProjectId = projectId;\n\n          if (!projectId) {\n            throw new Error('Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started');\n          }\n\n          resolve(projectId);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    return this._getDefaultProjectIdPromise;\n  }\n\n  getApplicationDefault(optionsOrCallback = {}, callback) {\n    let options;\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    if (callback) {\n      this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n    } else {\n      return this.getApplicationDefaultAsync(options);\n    }\n  }\n\n  async getApplicationDefaultAsync(options = {}) {\n    // If we've already got a cached credential, just return it.\n    if (this.cachedCredential) {\n      return {\n        credential: this.cachedCredential,\n        projectId: await this.getProjectIdAsync()\n      };\n    }\n\n    let credential;\n    let projectId; // Check for the existence of a local environment variable pointing to the\n    // location of the credential file. This is typically used in local\n    // developer scenarios.\n\n    credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n\n    if (credential) {\n      if (credential instanceof jwtclient_1.JWT) {\n        credential.scopes = this.scopes;\n      }\n\n      this.cachedCredential = credential;\n      projectId = await this.getProjectId();\n      return {\n        credential,\n        projectId\n      };\n    } // Look in the well-known credential file location.\n\n\n    credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n\n    if (credential) {\n      if (credential instanceof jwtclient_1.JWT) {\n        credential.scopes = this.scopes;\n      }\n\n      this.cachedCredential = credential;\n      projectId = await this.getProjectId();\n      return {\n        credential,\n        projectId\n      };\n    } // Determine if we're running on GCE.\n\n\n    let isGCE;\n\n    try {\n      isGCE = await this._checkIsGCE();\n    } catch (e) {\n      e.message = `Unexpected error determining execution environment: ${e.message}`;\n      throw e;\n    }\n\n    if (!isGCE) {\n      // We failed to find the default credentials. Bail out with an error.\n      throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n    } // For GCE, just return a default ComputeClient. It will take care of\n    // the rest.\n\n\n    options.scopes = this.scopes;\n    this.cachedCredential = new computeclient_1.Compute(options);\n    projectId = await this.getProjectId();\n    return {\n      projectId,\n      credential: this.cachedCredential\n    };\n  }\n  /**\n   * Determines whether the auth layer is running on Google Compute Engine.\n   * @returns A promise that resolves with the boolean.\n   * @api private\n   */\n\n\n  async _checkIsGCE() {\n    if (this.checkIsGCE === undefined) {\n      this.checkIsGCE = await gcpMetadata.isAvailable();\n    }\n\n    return this.checkIsGCE;\n  }\n  /**\n   * Attempts to load default credentials from the environment variable path..\n   * @returns Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n\n\n  async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n    const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n\n    if (!credentialsPath || credentialsPath.length === 0) {\n      return null;\n    }\n\n    try {\n      return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n    } catch (e) {\n      e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n      throw e;\n    }\n  }\n  /**\n   * Attempts to load default credentials from a well-known file location\n   * @return Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n\n\n  async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n    // First, figure out the location of the file, depending upon the OS type.\n    let location = null;\n\n    if (this._isWindows()) {\n      // Windows\n      location = process.env['APPDATA'];\n    } else {\n      // Linux or Mac\n      const home = process.env['HOME'];\n\n      if (home) {\n        location = path.join(home, '.config');\n      }\n    } // If we found the root path, expand it.\n\n\n    if (location) {\n      location = path.join(location, 'gcloud', 'application_default_credentials.json');\n\n      if (!fs.existsSync(location)) {\n        location = null;\n      }\n    } // The file does not exist.\n\n\n    if (!location) {\n      return null;\n    } // The file seems to exist. Try to use it.\n\n\n    const client = await this._getApplicationCredentialsFromFilePath(location, options);\n    return client;\n  }\n  /**\n   * Attempts to load default credentials from a file at the given path..\n   * @param filePath The path to the file to read.\n   * @returns Promise that resolves with the OAuth2Client\n   * @api private\n   */\n\n\n  async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n    // Make sure the path looks like a string.\n    if (!filePath || filePath.length === 0) {\n      throw new Error('The file path is invalid.');\n    } // Make sure there is a file at the path. lstatSync will throw if there is\n    // nothing there.\n\n\n    try {\n      // Resolve path to actual file in case of symlink. Expect a thrown error\n      // if not resolvable.\n      filePath = fs.realpathSync(filePath);\n\n      if (!fs.lstatSync(filePath).isFile()) {\n        throw new Error();\n      }\n    } catch (err) {\n      err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n      throw err;\n    } // Now open a read stream on the file, and parse it.\n\n\n    const readStream = fs.createReadStream(filePath);\n    return this.fromStream(readStream, options);\n  }\n  /**\n   * Create a credentials instance using the given input options.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n\n\n  fromJSON(json, options) {\n    let client;\n\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the Google auth settings.');\n    }\n\n    options = options || {};\n\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n    }\n\n    client.fromJSON(json);\n    return client;\n  }\n  /**\n   * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n   * object used to instantiate and the client.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n\n\n  _cacheClientFromJSON(json, options) {\n    let client; // create either a UserRefreshClient or JWT client.\n\n    options = options || {};\n\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n    }\n\n    client.fromJSON(json); // cache both raw data used to instantiate client and client itself.\n\n    this.jsonContent = json;\n    this.cachedCredential = client;\n    return this.cachedCredential;\n  }\n\n  fromStream(inputStream, optionsOrCallback = {}, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    if (callback) {\n      this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n    } else {\n      return this.fromStreamAsync(inputStream, options);\n    }\n  }\n\n  fromStreamAsync(inputStream, options) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the Google auth settings.');\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n\n          const r = this._cacheClientFromJSON(data, options);\n\n          return resolve(r);\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n  /**\n   * Create a credentials instance using the given API key string.\n   * @param apiKey The API key string\n   * @param options An optional options object.\n   * @returns A JWT loaded from the key\n   */\n\n\n  fromAPIKey(apiKey, options) {\n    options = options || {};\n    const client = new jwtclient_1.JWT(options);\n    client.fromAPIKey(apiKey);\n    return client;\n  }\n  /**\n   * Determines whether the current operating system is Windows.\n   * @api private\n   */\n\n\n  _isWindows() {\n    const sys = os.platform();\n\n    if (sys && sys.length >= 3) {\n      if (sys.substring(0, 3).toLowerCase() === 'win') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Run the Google Cloud SDK command that prints the default project ID\n   */\n\n\n  async getDefaultServiceProjectId() {\n    return new Promise(resolve => {\n      child_process_1.exec('gcloud config config-helper --format json', (err, stdout) => {\n        if (!err && stdout) {\n          try {\n            const projectId = JSON.parse(stdout).configuration.properties.core.project;\n            resolve(projectId);\n            return;\n          } catch (e) {// ignore errors\n          }\n        }\n\n        resolve(null);\n      });\n    });\n  }\n  /**\n   * Loads the project id from environment variables.\n   * @api private\n   */\n\n\n  getProductionProjectId() {\n    return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n  }\n  /**\n   * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n   * @api private\n   */\n\n\n  async getFileProjectId() {\n    if (this.cachedCredential) {\n      // Try to read the project ID from the cached credentials file\n      return this.cachedCredential.projectId;\n    } // Ensure the projectId is loaded from the keyFile if available.\n\n\n    if (this.keyFilename) {\n      const creds = await this.getClient();\n\n      if (creds && creds.projectId) {\n        return creds.projectId;\n      }\n    } // Try to load a credentials file and read its project ID\n\n\n    const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n\n    if (r) {\n      return r.projectId;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Gets the Compute Engine project ID if it can be inferred.\n   */\n\n\n  async getGCEProjectId() {\n    try {\n      const r = await gcpMetadata.project('project-id');\n      return r;\n    } catch (e) {\n      // Ignore any errors\n      return null;\n    }\n  }\n\n  getCredentials(callback) {\n    if (callback) {\n      this.getCredentialsAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getCredentialsAsync();\n    }\n  }\n\n  async getCredentialsAsync() {\n    await this.getClient();\n\n    if (this.jsonContent) {\n      const credential = {\n        client_email: this.jsonContent.client_email,\n        private_key: this.jsonContent.private_key\n      };\n      return credential;\n    }\n\n    const isGCE = await this._checkIsGCE();\n\n    if (!isGCE) {\n      throw new Error('Unknown error.');\n    } // For GCE, return the service account details from the metadata server\n    // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n    // The GCF metadata server doesn't respect querystring params if this / is\n    // not included.\n\n\n    const data = await gcpMetadata.instance({\n      property: 'service-accounts/',\n      params: {\n        recursive: 'true'\n      }\n    });\n\n    if (!data || !data.default || !data.default.email) {\n      throw new Error('Failure from metadata server.');\n    }\n\n    return {\n      client_email: data.default.email\n    };\n  }\n  /**\n   * Automatically obtain a client based on the provided configuration.  If no\n   * options were passed, use Application Default Credentials.\n   */\n\n\n  async getClient(options) {\n    if (options) {\n      throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n    }\n\n    if (!this.cachedCredential) {\n      if (this.jsonContent) {\n        this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n      } else if (this.keyFilename) {\n        const filePath = path.resolve(this.keyFilename);\n        const stream = fs.createReadStream(filePath);\n        await this.fromStreamAsync(stream, this.clientOptions);\n      } else {\n        await this.getApplicationDefaultAsync(this.clientOptions);\n      }\n    }\n\n    return this.cachedCredential;\n  }\n  /**\n   * Creates a client which will fetch an ID token for authorization.\n   * @param targetAudience the audience for the fetched ID token.\n   * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n   */\n\n\n  async getIdTokenClient(targetAudience) {\n    const client = await this.getClient();\n\n    if (!('fetchIdToken' in client)) {\n      throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n    }\n\n    return new idtokenclient_1.IdTokenClient({\n      targetAudience,\n      idTokenProvider: client\n    });\n  }\n  /**\n   * Automatically obtain application default credentials, and return\n   * an access token for making requests.\n   */\n\n\n  async getAccessToken() {\n    const client = await this.getClient();\n    return (await client.getAccessToken()).token;\n  }\n  /**\n   * Obtain the HTTP headers that will provide authorization for a given\n   * request.\n   */\n\n\n  async getRequestHeaders(url) {\n    const client = await this.getClient();\n    return client.getRequestHeaders(url);\n  }\n  /**\n   * Obtain credentials for a request, then attach the appropriate headers to\n   * the request options.\n   * @param opts Axios or Request options on which to attach the headers\n   */\n\n\n  async authorizeRequest(opts) {\n    opts = opts || {};\n    const url = opts.url || opts.uri;\n    const client = await this.getClient();\n    const headers = await client.getRequestHeaders(url);\n    opts.headers = Object.assign(opts.headers || {}, headers);\n    return opts;\n  }\n  /**\n   * Automatically obtain application default credentials, and make an\n   * HTTP request using the given options.\n   * @param opts Axios request options for the HTTP request.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  async request(opts) {\n    const client = await this.getClient();\n    return client.request(opts);\n  }\n  /**\n   * Determine the compute environment in which the code is running.\n   */\n\n\n  getEnv() {\n    return envDetect_1.getEnv();\n  }\n  /**\n   * Sign the given data with the current private key, or go out\n   * to the IAM API to sign it.\n   * @param data The data to be signed.\n   */\n\n\n  async sign(data) {\n    const client = await this.getClient();\n    const crypto = crypto_1.createCrypto();\n\n    if (client instanceof jwtclient_1.JWT && client.key) {\n      const sign = await crypto.sign(client.key, data);\n      return sign;\n    }\n\n    const projectId = await this.getProjectId();\n\n    if (!projectId) {\n      throw new Error('Cannot sign data without a project ID.');\n    }\n\n    const creds = await this.getCredentials();\n\n    if (!creds.client_email) {\n      throw new Error('Cannot sign data without `client_email`.');\n    }\n\n    const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${creds.client_email}:signBlob`;\n    const res = await this.request({\n      method: 'POST',\n      url,\n      data: {\n        payload: crypto.encodeBase64StringUtf8(data)\n      }\n    });\n    return res.data.signedBlob;\n  }\n\n}\n\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\n\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":{"version":3,"sources":["C:/React/slacker/node_modules/@google-cloud/common/node_modules/google-auth-library/build/src/auth/googleauth.js"],"names":["Object","defineProperty","exports","value","GoogleAuth","CLOUD_SDK_CLIENT_ID","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","transporters_1","computeclient_1","idtokenclient_1","envDetect_1","jwtclient_1","refreshclient_1","constructor","opts","checkIsGCE","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","keyFilename","keyFile","scopes","credentials","clientOptions","isGCE","getProjectId","callback","getProjectIdAsync","then","r","Promise","resolve","_getDefaultProjectIdPromise","reject","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","Error","e","getApplicationDefault","optionsOrCallback","options","getApplicationDefaultAsync","credential","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","message","Compute","isAvailable","credentialsPath","process","env","length","_getApplicationCredentialsFromFilePath","location","_isWindows","home","join","existsSync","client","filePath","realpathSync","lstatSync","isFile","err","readStream","createReadStream","fromStream","fromJSON","json","type","UserRefreshClient","_cacheClientFromJSON","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","fromAPIKey","apiKey","sys","platform","substring","toLowerCase","exec","stdout","configuration","properties","core","project","creds","getClient","getCredentials","getCredentialsAsync","client_email","private_key","instance","property","params","recursive","default","email","stream","getIdTokenClient","targetAudience","IdTokenClient","idTokenProvider","getAccessToken","token","getRequestHeaders","url","authorizeRequest","uri","headers","assign","request","getEnv","sign","crypto","createCrypto","key","res","method","payload","encodeBase64StringUtf8","signedBlob","DefaultTransporter"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst idtokenclient_1 = require(\"./idtokenclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return Promise.resolve(this._cachedProjectId);\n        }\n        // In implicit case, supports three environments. In order of precedence,\n        // the implicit environments are:\n        // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n        // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n        // - Cloud SDK: `gcloud config config-helper --format json`\n        // - GCE project ID from metadata server)\n        if (!this._getDefaultProjectIdPromise) {\n            // TODO: refactor the below code so that it doesn't mix and match\n            // promises and async/await.\n            this._getDefaultProjectIdPromise = new Promise(\n            // eslint-disable-next-line no-async-promise-executor\n            async (resolve, reject) => {\n                try {\n                    const projectId = this.getProductionProjectId() ||\n                        (await this.getFileProjectId()) ||\n                        (await this.getDefaultServiceProjectId()) ||\n                        (await this.getGCEProjectId());\n                    this._cachedProjectId = projectId;\n                    if (!projectId) {\n                        throw new Error('Unable to detect a Project Id in the current environment. \\n' +\n                            'To learn more about authentication and Google APIs, visit: \\n' +\n                            'https://cloud.google.com/docs/authentication/getting-started');\n                    }\n                    resolve(projectId);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        }\n        return this._getDefaultProjectIdPromise;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, just return it.\n        if (this.cachedCredential) {\n            return {\n                credential: this.cachedCredential,\n                projectId: await this.getProjectIdAsync(),\n            };\n        }\n        let credential;\n        let projectId;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Look in the well-known credential file location.\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Determine if we're running on GCE.\n        let isGCE;\n        try {\n            isGCE = await this._checkIsGCE();\n        }\n        catch (e) {\n            e.message = `Unexpected error determining execution environment: ${e.message}`;\n            throw e;\n        }\n        if (!isGCE) {\n            // We failed to find the default credentials. Bail out with an error.\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n        }\n        // For GCE, just return a default ComputeClient. It will take care of\n        // the rest.\n        options.scopes = this.scopes;\n        this.cachedCredential = new computeclient_1.Compute(options);\n        projectId = await this.getProjectId();\n        return { projectId, credential: this.cachedCredential };\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE = await gcpMetadata.isAvailable();\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n            process.env['google_application_credentials'];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        }\n        catch (e) {\n            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env['APPDATA'];\n        }\n        else {\n            // Linux or Mac\n            const home = process.env['HOME'];\n            if (home) {\n                location = path.join(home, '.config');\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error('The file path is invalid.');\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options) {\n        let client;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\n        }\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n        }\n        client.fromJSON(json);\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    _cacheClientFromJSON(json, options) {\n        let client;\n        // create either a UserRefreshClient or JWT client.\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n        }\n        client.fromJSON(json);\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return this.cachedCredential;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    const r = this._cacheClientFromJSON(data, options);\n                    return resolve(r);\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    async getDefaultServiceProjectId() {\n        return new Promise(resolve => {\n            child_process_1.exec('gcloud config config-helper --format json', (err, stdout) => {\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core\n                            .project;\n                        resolve(projectId);\n                        return;\n                    }\n                    catch (e) {\n                        // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return (process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\n            process.env['gcloud_project'] ||\n            process.env['google_cloud_project']);\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project('project-id');\n            return r;\n        }\n        catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        await this.getClient();\n        if (this.jsonContent) {\n            const credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n            };\n            return credential;\n        }\n        const isGCE = await this._checkIsGCE();\n        if (!isGCE) {\n            throw new Error('Unknown error.');\n        }\n        // For GCE, return the service account details from the metadata server\n        // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n        // The GCF metadata server doesn't respect querystring params if this / is\n        // not included.\n        const data = await gcpMetadata.instance({\n            property: 'service-accounts/',\n            params: { recursive: 'true' },\n        });\n        if (!data || !data.default || !data.default.email) {\n            throw new Error('Failure from metadata server.');\n        }\n        return { client_email: data.default.email };\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n    async getClient(options) {\n        if (options) {\n            throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n        }\n        if (!this.cachedCredential) {\n            if (this.jsonContent) {\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n            }\n            else if (this.keyFilename) {\n                const filePath = path.resolve(this.keyFilename);\n                const stream = fs.createReadStream(filePath);\n                await this.fromStreamAsync(stream, this.clientOptions);\n            }\n            else {\n                await this.getApplicationDefaultAsync(this.clientOptions);\n            }\n        }\n        return this.cachedCredential;\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n    async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!('fetchIdToken' in client)) {\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n        }\n        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    async sign(data) {\n        const client = await this.getClient();\n        const crypto = crypto_1.createCrypto();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const projectId = await this.getProjectId();\n        if (!projectId) {\n            throw new Error('Cannot sign data without a project ID.');\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error('Cannot sign data without `client_email`.');\n        }\n        const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${creds.client_email}:signBlob`;\n        const res = await this.request({\n            method: 'POST',\n            url,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data),\n            },\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceMappingURL=googleauth.js.map"]},"metadata":{},"sourceType":"script"}