{"ast":null,"code":"/*! firebase-admin v9.1.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Model = exports.MachineLearning = void 0;\n\nvar machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar utils = require(\"../utils\");\n/**\n * Internals of an ML instance.\n */\n\n\nvar MachineLearningInternals =\n/** @class */\nfunction () {\n  function MachineLearningInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<void>} An empty Promise that will be resolved when the\n   *     service is deleted.\n   */\n\n\n  MachineLearningInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve();\n  };\n\n  return MachineLearningInternals;\n}();\n/**\n * The Firebase Machine Learning class\n */\n\n\nvar MachineLearning =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this ML service.\n   * @constructor\n   */\n  function MachineLearning(app) {\n    this.INTERNAL = new MachineLearningInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'machine-learning/invalid-argument',\n        message: 'First argument passed to admin.machineLearning() must be a ' + 'valid Firebase app instance.'\n      });\n    }\n\n    this.appInternal = app;\n    this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n  }\n\n  Object.defineProperty(MachineLearning.prototype, \"app\", {\n    /**\n     * Returns the app associated with this ML instance.\n     *\n     * @return {FirebaseApp} The app associated with this ML instance.\n     */\n    get: function () {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a model in Firebase ML.\n   *\n   * @param {ModelOptions} model The model to create.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the created model.\n   */\n\n  MachineLearning.prototype.createModel = function (model) {\n    var _this = this;\n\n    return this.signUrlIfPresent(model).then(function (modelContent) {\n      return _this.client.createModel(modelContent);\n    }).then(function (operation) {\n      return handleOperation(operation);\n    });\n  };\n  /**\n   * Updates a model in Firebase ML.\n   *\n   * @param {string} modelId The id of the model to update.\n   * @param {ModelOptions} model The model fields to update.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the updated model.\n   */\n\n\n  MachineLearning.prototype.updateModel = function (modelId, model) {\n    var _this = this;\n\n    var updateMask = utils.generateUpdateMask(model);\n    return this.signUrlIfPresent(model).then(function (modelContent) {\n      return _this.client.updateModel(modelId, modelContent, updateMask);\n    }).then(function (operation) {\n      return handleOperation(operation);\n    });\n  };\n  /**\n   * Publishes a model in Firebase ML.\n   *\n   * @param {string} modelId The id of the model to publish.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the published model.\n   */\n\n\n  MachineLearning.prototype.publishModel = function (modelId) {\n    return this.setPublishStatus(modelId, true);\n  };\n  /**\n   * Unpublishes a model in Firebase ML.\n   *\n   * @param {string} modelId The id of the model to unpublish.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\n   */\n\n\n  MachineLearning.prototype.unpublishModel = function (modelId) {\n    return this.setPublishStatus(modelId, false);\n  };\n  /**\n   * Gets a model from Firebase ML.\n   *\n   * @param {string} modelId The id of the model to get.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\n   */\n\n\n  MachineLearning.prototype.getModel = function (modelId) {\n    return this.client.getModel(modelId).then(function (modelResponse) {\n      return new Model(modelResponse);\n    });\n  };\n  /**\n   * Lists models from Firebase ML.\n   *\n   * @param {ListModelsOptions} options The listing options.\n   *\n   * @return {Promise<{models: Model[], pageToken?: string}>} A promise that\n   *     resolves with the current (filtered) list of models and the next page\n   *     token. For the last page, an empty list of models and no page token are\n   *     returned.\n   */\n\n\n  MachineLearning.prototype.listModels = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return this.client.listModels(options).then(function (resp) {\n      if (!validator.isNonNullObject(resp)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid ListModels response: \" + JSON.stringify(resp));\n      }\n\n      var models = [];\n\n      if (resp.models) {\n        models = resp.models.map(function (rs) {\n          return new Model(rs);\n        });\n      }\n\n      var result = {\n        models: models\n      };\n\n      if (resp.nextPageToken) {\n        result.pageToken = resp.nextPageToken;\n      }\n\n      return result;\n    });\n  };\n  /**\n   * Deletes a model from Firebase ML.\n   *\n   * @param {string} modelId The id of the model to delete.\n   */\n\n\n  MachineLearning.prototype.deleteModel = function (modelId) {\n    return this.client.deleteModel(modelId);\n  };\n\n  MachineLearning.prototype.setPublishStatus = function (modelId, publish) {\n    var updateMask = ['state.published'];\n    var options = {\n      state: {\n        published: publish\n      }\n    };\n    return this.client.updateModel(modelId, options, updateMask).then(function (operation) {\n      return handleOperation(operation);\n    });\n  };\n\n  MachineLearning.prototype.signUrlIfPresent = function (options) {\n    var _a;\n\n    var modelOptions = deep_copy_1.deepCopy(options);\n\n    if ((_a = modelOptions.tfliteModel) === null || _a === void 0 ? void 0 : _a.gcsTfliteUri) {\n      return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri).then(function (uri) {\n        modelOptions.tfliteModel.gcsTfliteUri = uri;\n        return modelOptions;\n      }).catch(function (err) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', \"Error during signing upload url: \" + err.message);\n      });\n    }\n\n    return Promise.resolve(modelOptions);\n  };\n\n  MachineLearning.prototype.signUrl = function (unsignedUrl) {\n    var MINUTES_IN_MILLIS = 60 * 1000;\n    var URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n    var gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n    var matches = gcsRegex.exec(unsignedUrl);\n\n    if (!matches) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid unsigned url: \" + unsignedUrl);\n    }\n\n    var bucketName = matches[1];\n    var blobName = matches[2];\n    var bucket = this.appInternal.storage().bucket(bucketName);\n    var blob = bucket.file(blobName);\n    return blob.getSignedUrl({\n      action: 'read',\n      expires: Date.now() + URL_VALID_DURATION\n    }).then(function (signUrl) {\n      return signUrl[0];\n    });\n  };\n\n  return MachineLearning;\n}();\n\nexports.MachineLearning = MachineLearning;\n/**\n * A Firebase ML Model output object.\n */\n\nvar Model =\n/** @class */\nfunction () {\n  function Model(model) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.name) || !validator.isNonEmptyString(model.createTime) || !validator.isNonEmptyString(model.updateTime) || !validator.isNonEmptyString(model.displayName) || !validator.isNonEmptyString(model.etag)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Model response: \" + JSON.stringify(model));\n    }\n\n    this.modelId = extractModelId(model.name);\n    this.displayName = model.displayName;\n    this.tags = model.tags || [];\n    this.createTime = new Date(model.createTime).toUTCString();\n    this.updateTime = new Date(model.updateTime).toUTCString();\n\n    if ((_b = (_a = model.state) === null || _a === void 0 ? void 0 : _a.validationError) === null || _b === void 0 ? void 0 : _b.message) {\n      this.validationError = (_d = (_c = model.state) === null || _c === void 0 ? void 0 : _c.validationError) === null || _d === void 0 ? void 0 : _d.message;\n    }\n\n    this.published = ((_e = model.state) === null || _e === void 0 ? void 0 : _e.published) || false;\n    this.etag = model.etag;\n\n    if (model.modelHash) {\n      this.modelHash = model.modelHash;\n    }\n\n    if ((_f = model.tfliteModel) === null || _f === void 0 ? void 0 : _f.gcsTfliteUri) {\n      this.tfliteModel = {\n        gcsTfliteUri: model.tfliteModel.gcsTfliteUri,\n        sizeBytes: model.tfliteModel.sizeBytes\n      };\n    }\n  }\n\n  Object.defineProperty(Model.prototype, \"locked\", {\n    get: function () {\n      // Backend does not currently return locked models.\n      // This will likely change in future.\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Model.prototype.waitForUnlocked = function (_maxTimeSeconds) {\n    // Backend does not currently return locked models.\n    // This will likely change in future.\n    return Promise.resolve();\n  };\n\n  return Model;\n}();\n\nexports.Model = Model;\n\nfunction extractModelId(resourceName) {\n  return resourceName.split('/').pop();\n}\n\nfunction handleOperation(op) {\n  // Backend currently does not return operations that are not done.\n  if (op.done) {\n    // Done operations must have either a response or an error.\n    if (op.response) {\n      return new Model(op.response);\n    } else if (op.error) {\n      throw machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n    }\n  }\n\n  throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Operation response: \" + JSON.stringify(op));\n}","map":{"version":3,"sources":["C:/React/slacker/node_modules/firebase-admin/lib/machine-learning/machine-learning.js"],"names":["Object","defineProperty","exports","value","Model","MachineLearning","machine_learning_api_client_1","require","error_1","validator","machine_learning_utils_1","deep_copy_1","utils","MachineLearningInternals","prototype","delete","Promise","resolve","app","INTERNAL","isNonNullObject","FirebaseError","code","message","appInternal","client","MachineLearningApiClient","get","enumerable","configurable","createModel","model","_this","signUrlIfPresent","then","modelContent","operation","handleOperation","updateModel","modelId","updateMask","generateUpdateMask","publishModel","setPublishStatus","unpublishModel","getModel","modelResponse","listModels","options","resp","FirebaseMachineLearningError","JSON","stringify","models","map","rs","result","nextPageToken","pageToken","deleteModel","publish","state","published","_a","modelOptions","deepCopy","tfliteModel","gcsTfliteUri","signUrl","uri","catch","err","unsignedUrl","MINUTES_IN_MILLIS","URL_VALID_DURATION","gcsRegex","matches","exec","bucketName","blobName","bucket","storage","blob","file","getSignedUrl","action","expires","Date","now","_b","_c","_d","_e","_f","isNonEmptyString","name","createTime","updateTime","displayName","etag","extractModelId","tags","toUTCString","validationError","modelHash","sizeBytes","waitForUnlocked","_maxTimeSeconds","resourceName","split","pop","op","done","response","error","fromOperationError"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.1.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Model = exports.MachineLearning = void 0;\nvar machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\nvar deep_copy_1 = require(\"../utils/deep-copy\");\nvar utils = require(\"../utils\");\n/**\n * Internals of an ML instance.\n */\nvar MachineLearningInternals = /** @class */ (function () {\n    function MachineLearningInternals() {\n    }\n    /**\n     * Deletes the service and its associated resources.\n     *\n     * @return {Promise<void>} An empty Promise that will be resolved when the\n     *     service is deleted.\n     */\n    MachineLearningInternals.prototype.delete = function () {\n        // There are no resources to clean up.\n        return Promise.resolve();\n    };\n    return MachineLearningInternals;\n}());\n/**\n * The Firebase Machine Learning class\n */\nvar MachineLearning = /** @class */ (function () {\n    /**\n     * @param {FirebaseApp} app The app for this ML service.\n     * @constructor\n     */\n    function MachineLearning(app) {\n        this.INTERNAL = new MachineLearningInternals();\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseError({\n                code: 'machine-learning/invalid-argument',\n                message: 'First argument passed to admin.machineLearning() must be a ' +\n                    'valid Firebase app instance.',\n            });\n        }\n        this.appInternal = app;\n        this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n    }\n    Object.defineProperty(MachineLearning.prototype, \"app\", {\n        /**\n         * Returns the app associated with this ML instance.\n         *\n         * @return {FirebaseApp} The app associated with this ML instance.\n         */\n        get: function () {\n            return this.appInternal;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Creates a model in Firebase ML.\n     *\n     * @param {ModelOptions} model The model to create.\n     *\n     * @return {Promise<Model>} A Promise fulfilled with the created model.\n     */\n    MachineLearning.prototype.createModel = function (model) {\n        var _this = this;\n        return this.signUrlIfPresent(model)\n            .then(function (modelContent) { return _this.client.createModel(modelContent); })\n            .then(function (operation) { return handleOperation(operation); });\n    };\n    /**\n     * Updates a model in Firebase ML.\n     *\n     * @param {string} modelId The id of the model to update.\n     * @param {ModelOptions} model The model fields to update.\n     *\n     * @return {Promise<Model>} A Promise fulfilled with the updated model.\n     */\n    MachineLearning.prototype.updateModel = function (modelId, model) {\n        var _this = this;\n        var updateMask = utils.generateUpdateMask(model);\n        return this.signUrlIfPresent(model)\n            .then(function (modelContent) { return _this.client.updateModel(modelId, modelContent, updateMask); })\n            .then(function (operation) { return handleOperation(operation); });\n    };\n    /**\n     * Publishes a model in Firebase ML.\n     *\n     * @param {string} modelId The id of the model to publish.\n     *\n     * @return {Promise<Model>} A Promise fulfilled with the published model.\n     */\n    MachineLearning.prototype.publishModel = function (modelId) {\n        return this.setPublishStatus(modelId, true);\n    };\n    /**\n     * Unpublishes a model in Firebase ML.\n     *\n     * @param {string} modelId The id of the model to unpublish.\n     *\n     * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\n     */\n    MachineLearning.prototype.unpublishModel = function (modelId) {\n        return this.setPublishStatus(modelId, false);\n    };\n    /**\n     * Gets a model from Firebase ML.\n     *\n     * @param {string} modelId The id of the model to get.\n     *\n     * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\n     */\n    MachineLearning.prototype.getModel = function (modelId) {\n        return this.client.getModel(modelId)\n            .then(function (modelResponse) { return new Model(modelResponse); });\n    };\n    /**\n     * Lists models from Firebase ML.\n     *\n     * @param {ListModelsOptions} options The listing options.\n     *\n     * @return {Promise<{models: Model[], pageToken?: string}>} A promise that\n     *     resolves with the current (filtered) list of models and the next page\n     *     token. For the last page, an empty list of models and no page token are\n     *     returned.\n     */\n    MachineLearning.prototype.listModels = function (options) {\n        if (options === void 0) { options = {}; }\n        return this.client.listModels(options)\n            .then(function (resp) {\n            if (!validator.isNonNullObject(resp)) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid ListModels response: \" + JSON.stringify(resp));\n            }\n            var models = [];\n            if (resp.models) {\n                models = resp.models.map(function (rs) { return new Model(rs); });\n            }\n            var result = { models: models };\n            if (resp.nextPageToken) {\n                result.pageToken = resp.nextPageToken;\n            }\n            return result;\n        });\n    };\n    /**\n     * Deletes a model from Firebase ML.\n     *\n     * @param {string} modelId The id of the model to delete.\n     */\n    MachineLearning.prototype.deleteModel = function (modelId) {\n        return this.client.deleteModel(modelId);\n    };\n    MachineLearning.prototype.setPublishStatus = function (modelId, publish) {\n        var updateMask = ['state.published'];\n        var options = { state: { published: publish } };\n        return this.client.updateModel(modelId, options, updateMask)\n            .then(function (operation) { return handleOperation(operation); });\n    };\n    MachineLearning.prototype.signUrlIfPresent = function (options) {\n        var _a;\n        var modelOptions = deep_copy_1.deepCopy(options);\n        if ((_a = modelOptions.tfliteModel) === null || _a === void 0 ? void 0 : _a.gcsTfliteUri) {\n            return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri)\n                .then(function (uri) {\n                modelOptions.tfliteModel.gcsTfliteUri = uri;\n                return modelOptions;\n            })\n                .catch(function (err) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', \"Error during signing upload url: \" + err.message);\n            });\n        }\n        return Promise.resolve(modelOptions);\n    };\n    MachineLearning.prototype.signUrl = function (unsignedUrl) {\n        var MINUTES_IN_MILLIS = 60 * 1000;\n        var URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n        var gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n        var matches = gcsRegex.exec(unsignedUrl);\n        if (!matches) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid unsigned url: \" + unsignedUrl);\n        }\n        var bucketName = matches[1];\n        var blobName = matches[2];\n        var bucket = this.appInternal.storage().bucket(bucketName);\n        var blob = bucket.file(blobName);\n        return blob.getSignedUrl({\n            action: 'read',\n            expires: Date.now() + URL_VALID_DURATION,\n        }).then(function (signUrl) { return signUrl[0]; });\n    };\n    return MachineLearning;\n}());\nexports.MachineLearning = MachineLearning;\n/**\n * A Firebase ML Model output object.\n */\nvar Model = /** @class */ (function () {\n    function Model(model) {\n        var _a, _b, _c, _d, _e, _f;\n        if (!validator.isNonNullObject(model) ||\n            !validator.isNonEmptyString(model.name) ||\n            !validator.isNonEmptyString(model.createTime) ||\n            !validator.isNonEmptyString(model.updateTime) ||\n            !validator.isNonEmptyString(model.displayName) ||\n            !validator.isNonEmptyString(model.etag)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Model response: \" + JSON.stringify(model));\n        }\n        this.modelId = extractModelId(model.name);\n        this.displayName = model.displayName;\n        this.tags = model.tags || [];\n        this.createTime = new Date(model.createTime).toUTCString();\n        this.updateTime = new Date(model.updateTime).toUTCString();\n        if ((_b = (_a = model.state) === null || _a === void 0 ? void 0 : _a.validationError) === null || _b === void 0 ? void 0 : _b.message) {\n            this.validationError = (_d = (_c = model.state) === null || _c === void 0 ? void 0 : _c.validationError) === null || _d === void 0 ? void 0 : _d.message;\n        }\n        this.published = ((_e = model.state) === null || _e === void 0 ? void 0 : _e.published) || false;\n        this.etag = model.etag;\n        if (model.modelHash) {\n            this.modelHash = model.modelHash;\n        }\n        if ((_f = model.tfliteModel) === null || _f === void 0 ? void 0 : _f.gcsTfliteUri) {\n            this.tfliteModel = {\n                gcsTfliteUri: model.tfliteModel.gcsTfliteUri,\n                sizeBytes: model.tfliteModel.sizeBytes,\n            };\n        }\n    }\n    Object.defineProperty(Model.prototype, \"locked\", {\n        get: function () {\n            // Backend does not currently return locked models.\n            // This will likely change in future.\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Model.prototype.waitForUnlocked = function (_maxTimeSeconds) {\n        // Backend does not currently return locked models.\n        // This will likely change in future.\n        return Promise.resolve();\n    };\n    return Model;\n}());\nexports.Model = Model;\nfunction extractModelId(resourceName) {\n    return resourceName.split('/').pop();\n}\nfunction handleOperation(op) {\n    // Backend currently does not return operations that are not done.\n    if (op.done) {\n        // Done operations must have either a response or an error.\n        if (op.response) {\n            return new Model(op.response);\n        }\n        else if (op.error) {\n            throw machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n        }\n    }\n    throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Operation response: \" + JSON.stringify(op));\n}\n"]},"metadata":{},"sourceType":"script"}