{"ast":null,"code":"'use strict';\n\nconst pTry = require('p-try');\n\nconst pLimit = concurrency => {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  const queue = [];\n  let activeCount = 0;\n\n  const next = () => {\n    activeCount--;\n\n    if (queue.length > 0) {\n      queue.shift()();\n    }\n  };\n\n  const run = async (fn, resolve, ...args) => {\n    activeCount++; // TODO: Get rid of `pTry`. It's not needed anymore.\n\n    const result = pTry(fn, ...args);\n    resolve(result);\n\n    try {\n      await result;\n    } catch {}\n\n    next();\n  };\n\n  const enqueue = (fn, resolve, ...args) => {\n    queue.push(run.bind(null, fn, resolve, ...args));\n\n    (async () => {\n      // This function needs to wait until the next microtask before comparing\n      // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n      // when the run function is dequeued and called. The comparison in the if-statement\n      // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n      await Promise.resolve();\n\n      if (activeCount < concurrency && queue.length > 0) {\n        queue.shift()();\n      }\n    })();\n  };\n\n  const generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.length\n    },\n    clearQueue: {\n      value: () => {\n        queue.length = 0;\n      }\n    }\n  });\n  return generator;\n};\n\nmodule.exports = pLimit;","map":{"version":3,"sources":["C:/React/slacker/node_modules/@google-cloud/storage/node_modules/p-limit/index.js"],"names":["pTry","require","pLimit","concurrency","Number","isInteger","Infinity","TypeError","queue","activeCount","next","length","shift","run","fn","resolve","args","result","enqueue","push","bind","Promise","generator","Object","defineProperties","get","pendingCount","clearQueue","value","module","exports"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,MAAMC,MAAM,GAAGC,WAAW,IAAI;AAC7B,MAAI,EAAE,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,KAAiCA,WAAW,KAAKG,QAAlD,KAA+DH,WAAW,GAAG,CAA/E,CAAJ,EAAuF;AACtF,UAAM,IAAII,SAAJ,CAAc,qDAAd,CAAN;AACA;;AAED,QAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,CAAlB;;AAEA,QAAMC,IAAI,GAAG,MAAM;AAClBD,IAAAA,WAAW;;AAEX,QAAID,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACrBH,MAAAA,KAAK,CAACI,KAAN;AACA;AACD,GAND;;AAQA,QAAMC,GAAG,GAAG,OAAOC,EAAP,EAAWC,OAAX,EAAoB,GAAGC,IAAvB,KAAgC;AAC3CP,IAAAA,WAAW,GADgC,CAG3C;;AACA,UAAMQ,MAAM,GAAGjB,IAAI,CAACc,EAAD,EAAK,GAAGE,IAAR,CAAnB;AAEAD,IAAAA,OAAO,CAACE,MAAD,CAAP;;AAEA,QAAI;AACH,YAAMA,MAAN;AACA,KAFD,CAEE,MAAM,CAAE;;AAEVP,IAAAA,IAAI;AACJ,GAbD;;AAeA,QAAMQ,OAAO,GAAG,CAACJ,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,KAA0B;AACzCR,IAAAA,KAAK,CAACW,IAAN,CAAWN,GAAG,CAACO,IAAJ,CAAS,IAAT,EAAeN,EAAf,EAAmBC,OAAnB,EAA4B,GAAGC,IAA/B,CAAX;;AAEA,KAAC,YAAY;AACZ;AACA;AACA;AACA;AACA,YAAMK,OAAO,CAACN,OAAR,EAAN;;AAEA,UAAIN,WAAW,GAAGN,WAAd,IAA6BK,KAAK,CAACG,MAAN,GAAe,CAAhD,EAAmD;AAClDH,QAAAA,KAAK,CAACI,KAAN;AACA;AACD,KAVD;AAWA,GAdD;;AAgBA,QAAMU,SAAS,GAAG,CAACR,EAAD,EAAK,GAAGE,IAAR,KAAiB,IAAIK,OAAJ,CAAYN,OAAO,IAAIG,OAAO,CAACJ,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,CAA9B,CAAnC;;AACAO,EAAAA,MAAM,CAACC,gBAAP,CAAwBF,SAAxB,EAAmC;AAClCb,IAAAA,WAAW,EAAE;AACZgB,MAAAA,GAAG,EAAE,MAAMhB;AADC,KADqB;AAIlCiB,IAAAA,YAAY,EAAE;AACbD,MAAAA,GAAG,EAAE,MAAMjB,KAAK,CAACG;AADJ,KAJoB;AAOlCgB,IAAAA,UAAU,EAAE;AACXC,MAAAA,KAAK,EAAE,MAAM;AACZpB,QAAAA,KAAK,CAACG,MAAN,GAAe,CAAf;AACA;AAHU;AAPsB,GAAnC;AAcA,SAAOW,SAAP;AACA,CA/DD;;AAiEAO,MAAM,CAACC,OAAP,GAAiB5B,MAAjB","sourcesContent":["'use strict';\nconst pTry = require('p-try');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = [];\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.length > 0) {\n\t\t\tqueue.shift()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\t// TODO: Get rid of `pTry`. It's not needed anymore.\n\t\tconst result = pTry(fn, ...args);\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tqueue.push(run.bind(null, fn, resolve, ...args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.length > 0) {\n\t\t\t\tqueue.shift()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.length\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.length = 0;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\n"]},"metadata":{},"sourceType":"script"}