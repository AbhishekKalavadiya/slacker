{"ast":null,"code":"/*! firebase-admin v9.1.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MachineLearningApiClient = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar ML_V1BETA2_API = 'https://firebaseml.googleapis.com/v1beta2';\nvar FIREBASE_VERSION_HEADER = {\n  'X-Firebase-Client': \"fire-admin-node/\" + utils.getSdkVersion()\n};\n/**\n * Class that facilitates sending requests to the Firebase ML backend API.\n *\n * @private\n */\n\nvar MachineLearningApiClient =\n/** @class */\nfunction () {\n  function MachineLearningApiClient(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'First argument passed to admin.machineLearning() must be a valid ' + 'Firebase app instance.');\n    }\n\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  MachineLearningApiClient.prototype.createModel = function (model) {\n    var _this = this;\n\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.displayName)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model content.');\n      return Promise.reject(err);\n    }\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'POST',\n        url: url + \"/models\",\n        data: model\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.updateModel = function (modelId, model, updateMask) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(modelId) || !validator.isNonNullObject(model) || !validator.isNonEmptyArray(updateMask)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model or mask content.');\n      return Promise.reject(err);\n    }\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'PATCH',\n        url: url + \"/models/\" + modelId + \"?updateMask=\" + updateMask.join(),\n        data: model\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.getModel = function (modelId) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getModelName(modelId);\n    }).then(function (modelName) {\n      return _this.getResource(modelName);\n    });\n  };\n\n  MachineLearningApiClient.prototype.listModels = function (options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!validator.isNonNullObject(options)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid ListModelsOptions');\n      return Promise.reject(err);\n    }\n\n    if (typeof options.filter !== 'undefined' && !validator.isNonEmptyString(options.filter)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid list filter.');\n      return Promise.reject(err);\n    }\n\n    if (typeof options.pageSize !== 'undefined') {\n      if (!validator.isNumber(options.pageSize)) {\n        var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid page size.');\n        return Promise.reject(err);\n      }\n\n      if (options.pageSize < 1 || options.pageSize > 100) {\n        var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Page size must be between 1 and 100.');\n        return Promise.reject(err);\n      }\n    }\n\n    if (typeof options.pageToken !== 'undefined' && !validator.isNonEmptyString(options.pageToken)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Next page token must be a non-empty string.');\n      return Promise.reject(err);\n    }\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/models\",\n        data: options\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.deleteModel = function (modelId) {\n    var _this = this;\n\n    return this.getUrl().then(function (url) {\n      var modelName = _this.getModelName(modelId);\n\n      var request = {\n        method: 'DELETE',\n        url: url + \"/\" + modelName\n      };\n      return _this.sendRequest(request);\n    });\n  };\n  /**\n   * Gets the specified resource from the ML API. Resource names must be the short names without project\n   * ID prefix (e.g. `models/123456789`).\n   *\n   * @param {string} name Full qualified name of the resource to get.\n   * @returns {Promise<T>} A promise that fulfills with the resource.\n   */\n\n\n  MachineLearningApiClient.prototype.getResource = function (name) {\n    var _this = this;\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/\" + name\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    request.headers = FIREBASE_VERSION_HEADER;\n    return this.httpClient.send(request).then(function (resp) {\n      return resp.data;\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  MachineLearningApiClient.prototype.toFirebaseError = function (err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n\n    var response = err.response;\n\n    if (!response.isJson()) {\n      return new machine_learning_utils_1.FirebaseMachineLearningError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n    }\n\n    var error = response.data.error || {};\n    var code = 'unknown-error';\n\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n\n    var message = error.message || \"Unknown server error: \" + response.text;\n    return new machine_learning_utils_1.FirebaseMachineLearningError(code, message);\n  };\n\n  MachineLearningApiClient.prototype.getUrl = function () {\n    return this.getProjectIdPrefix().then(function (projectIdPrefix) {\n      return ML_V1BETA2_API + \"/\" + projectIdPrefix;\n    });\n  };\n\n  MachineLearningApiClient.prototype.getProjectIdPrefix = function () {\n    var _this = this;\n\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectIdPrefix = \"projects/\" + projectId;\n      return _this.projectIdPrefix;\n    });\n  };\n\n  MachineLearningApiClient.prototype.getModelName = function (modelId) {\n    if (!validator.isNonEmptyString(modelId)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must be a non-empty string.');\n    }\n\n    if (modelId.indexOf('/') !== -1) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must not contain any \"/\" characters.');\n    }\n\n    return \"models/\" + modelId;\n  };\n\n  return MachineLearningApiClient;\n}();\n\nexports.MachineLearningApiClient = MachineLearningApiClient;\nvar ERROR_CODE_MAPPING = {\n  INVALID_ARGUMENT: 'invalid-argument',\n  NOT_FOUND: 'not-found',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'authentication-error',\n  UNKNOWN: 'unknown-error'\n};","map":{"version":3,"sources":["C:/React/slacker/node_modules/firebase-admin/lib/machine-learning/machine-learning-api-client.js"],"names":["Object","defineProperty","exports","value","MachineLearningApiClient","api_request_1","require","error_1","machine_learning_utils_1","utils","validator","ML_V1BETA2_API","FIREBASE_VERSION_HEADER","getSdkVersion","app","isNonNullObject","FirebaseMachineLearningError","httpClient","AuthorizedHttpClient","prototype","createModel","model","_this","isNonEmptyString","displayName","err","Promise","reject","getUrl","then","url","request","method","data","sendRequest","updateModel","modelId","updateMask","isNonEmptyArray","join","getModel","resolve","getModelName","modelName","getResource","listModels","options","filter","pageSize","isNumber","pageToken","deleteModel","name","headers","send","resp","catch","toFirebaseError","PrefixedFirebaseError","response","isJson","status","text","error","code","ERROR_CODE_MAPPING","message","getProjectIdPrefix","projectIdPrefix","findProjectId","projectId","indexOf","INVALID_ARGUMENT","NOT_FOUND","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.1.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MachineLearningApiClient = void 0;\nvar api_request_1 = require(\"../utils/api-request\");\nvar error_1 = require(\"../utils/error\");\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\nvar ML_V1BETA2_API = 'https://firebaseml.googleapis.com/v1beta2';\nvar FIREBASE_VERSION_HEADER = {\n    'X-Firebase-Client': \"fire-admin-node/\" + utils.getSdkVersion(),\n};\n/**\n * Class that facilitates sending requests to the Firebase ML backend API.\n *\n * @private\n */\nvar MachineLearningApiClient = /** @class */ (function () {\n    function MachineLearningApiClient(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'First argument passed to admin.machineLearning() must be a valid '\n                + 'Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    MachineLearningApiClient.prototype.createModel = function (model) {\n        var _this = this;\n        if (!validator.isNonNullObject(model) ||\n            !validator.isNonEmptyString(model.displayName)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model content.');\n            return Promise.reject(err);\n        }\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'POST',\n                url: url + \"/models\",\n                data: model,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    MachineLearningApiClient.prototype.updateModel = function (modelId, model, updateMask) {\n        var _this = this;\n        if (!validator.isNonEmptyString(modelId) ||\n            !validator.isNonNullObject(model) ||\n            !validator.isNonEmptyArray(updateMask)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model or mask content.');\n            return Promise.reject(err);\n        }\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'PATCH',\n                url: url + \"/models/\" + modelId + \"?updateMask=\" + updateMask.join(),\n                data: model,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    MachineLearningApiClient.prototype.getModel = function (modelId) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getModelName(modelId);\n        })\n            .then(function (modelName) {\n            return _this.getResource(modelName);\n        });\n    };\n    MachineLearningApiClient.prototype.listModels = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (!validator.isNonNullObject(options)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid ListModelsOptions');\n            return Promise.reject(err);\n        }\n        if (typeof options.filter !== 'undefined' && !validator.isNonEmptyString(options.filter)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid list filter.');\n            return Promise.reject(err);\n        }\n        if (typeof options.pageSize !== 'undefined') {\n            if (!validator.isNumber(options.pageSize)) {\n                var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid page size.');\n                return Promise.reject(err);\n            }\n            if (options.pageSize < 1 || options.pageSize > 100) {\n                var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Page size must be between 1 and 100.');\n                return Promise.reject(err);\n            }\n        }\n        if (typeof options.pageToken !== 'undefined' && !validator.isNonEmptyString(options.pageToken)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Next page token must be a non-empty string.');\n            return Promise.reject(err);\n        }\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'GET',\n                url: url + \"/models\",\n                data: options,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    MachineLearningApiClient.prototype.deleteModel = function (modelId) {\n        var _this = this;\n        return this.getUrl()\n            .then(function (url) {\n            var modelName = _this.getModelName(modelId);\n            var request = {\n                method: 'DELETE',\n                url: url + \"/\" + modelName,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    /**\n     * Gets the specified resource from the ML API. Resource names must be the short names without project\n     * ID prefix (e.g. `models/123456789`).\n     *\n     * @param {string} name Full qualified name of the resource to get.\n     * @returns {Promise<T>} A promise that fulfills with the resource.\n     */\n    MachineLearningApiClient.prototype.getResource = function (name) {\n        var _this = this;\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'GET',\n                url: url + \"/\" + name,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    MachineLearningApiClient.prototype.sendRequest = function (request) {\n        var _this = this;\n        request.headers = FIREBASE_VERSION_HEADER;\n        return this.httpClient.send(request)\n            .then(function (resp) {\n            return resp.data;\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    MachineLearningApiClient.prototype.toFirebaseError = function (err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        var response = err.response;\n        if (!response.isJson()) {\n            return new machine_learning_utils_1.FirebaseMachineLearningError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n        }\n        var error = response.data.error || {};\n        var code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        var message = error.message || \"Unknown server error: \" + response.text;\n        return new machine_learning_utils_1.FirebaseMachineLearningError(code, message);\n    };\n    MachineLearningApiClient.prototype.getUrl = function () {\n        return this.getProjectIdPrefix()\n            .then(function (projectIdPrefix) {\n            return ML_V1BETA2_API + \"/\" + projectIdPrefix;\n        });\n    };\n    MachineLearningApiClient.prototype.getProjectIdPrefix = function () {\n        var _this = this;\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then(function (projectId) {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            _this.projectIdPrefix = \"projects/\" + projectId;\n            return _this.projectIdPrefix;\n        });\n    };\n    MachineLearningApiClient.prototype.getModelName = function (modelId) {\n        if (!validator.isNonEmptyString(modelId)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must be a non-empty string.');\n        }\n        if (modelId.indexOf('/') !== -1) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must not contain any \"/\" characters.');\n        }\n        return \"models/\" + modelId;\n    };\n    return MachineLearningApiClient;\n}());\nexports.MachineLearningApiClient = MachineLearningApiClient;\nvar ERROR_CODE_MAPPING = {\n    INVALID_ARGUMENT: 'invalid-argument',\n    NOT_FOUND: 'not-found',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'authentication-error',\n    UNKNOWN: 'unknown-error',\n};\n"]},"metadata":{},"sourceType":"script"}